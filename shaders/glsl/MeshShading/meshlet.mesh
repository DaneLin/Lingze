#version 450
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_mesh_shader: require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

layout(set = 0, binding = 0) uniform ubo_data
{
	mat4 view;
	mat4 projection;
};

struct Vertex
{
    vec3 pos;
    vec3 color;
    vec2 uv;
};

layout(binding = 1, scalar) readonly buffer Vertices
{
    Vertex vertices[];
};

struct Meshlet
{
    uint vertices[64];
    uint8_t indices[126 * 3];
    uint8_t triangleCount;
    uint8_t vertexCount;
};

layout(binding = 2, scalar) readonly buffer Meshlets
{
    Meshlet meshlets[];
};

vec3 randomColor(uint seed)
{
    seed = (seed ^ 61u) ^ (seed >> 16u);
    seed *= 9u;
    seed = seed ^ (seed >> 4u);
    seed *= 0x27d4eb2du;
    seed = seed ^ (seed >> 15u);

    float r = float((seed & 0xFFu)) / 255.0;
    float g = float((seed >> 8u) & 0xFFu) / 255.0;
    float b = float((seed >> 16u) & 0xFFu) / 255.0;

    return vec3(r, g, b);
}

layout(location = 0) out vec4 color[];

void main()
{
    uint mi = gl_WorkGroupID.x;
    uint ti = gl_LocalInvocationID.x;
	uint vertexCount = uint(meshlets[mi].vertexCount);
    uint indexCount = uint(meshlets[mi].triangleCount) * 3;
    uint primCount = uint(meshlets[mi].triangleCount);

    SetMeshOutputsEXT(vertexCount, primCount);
	
    vec3 meshletColor = randomColor(mi);

    for (uint i = ti; i < uint(meshlets[mi].vertexCount); i += 32)
    {
        uint vi = meshlets[mi].vertices[i];

        vec3 position = vec3(vertices[vi].pos);
        vec2 texcoord = vec2(vertices[vi].uv);

        gl_MeshVerticesEXT[i].gl_Position = projection * view * vec4(position, 1.0);
        color[i] = vec4(meshletColor, 1.0);
    }

	
    for (uint p = ti; p < primCount; p += 32)
    {
        // 这些索引是meshlet局部顶点索引，它们指向meshlet的vertices数组中的位置
        uint idx0 = uint(meshlets[mi].indices[3*p]);
        uint idx1 = uint(meshlets[mi].indices[3*p + 1]);
        uint idx2 = uint(meshlets[mi].indices[3*p + 2]);
        
        // 将这些局部索引分配给图元
        gl_PrimitiveTriangleIndicesEXT[p] = uvec3(idx0, idx1, idx2);
    }
}