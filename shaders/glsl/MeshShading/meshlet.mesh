#version 450
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive : require

#include "mesh.h"
#include "../common_math.h"

layout(local_size_x = MESH_WGSIZE, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

layout(set = 0, binding = 0) uniform UboData
{
	mat4 view;
	mat4 projection;
};

layout(set = 0, binding = 1, scalar) readonly buffer Vertices
{
	Vertex vertices[];
};

layout(set = 0, binding = 2) readonly buffer Meshlets
{
	Meshlet meshlets[];
};

layout(set = 0, binding = 3) readonly buffer MeshletDataBuffer
{
	uint meshlet_data[];
};


taskPayloadSharedEXT TaskPayload payload;

layout(location = 0) out vec4 color[];
layout(location = 1) out flat uint material_index[];
layout(location = 2) out vec2 texcoord[];

void main()
{
    uint mi = payload.meshlet_indices[gl_WorkGroupID.x];
    uint ti = gl_LocalInvocationID.x;



	uint vertex_count = uint(meshlets[mi].vertex_count);
    uint index_count = uint(meshlets[mi].triangle_count) * 3;
    uint prim_count = uint(meshlets[mi].triangle_count);

    SetMeshOutputsEXT(vertex_count, prim_count);

    vec3 meshlet_color = random_color(mi);

    for (uint i = ti; i < uint(meshlets[mi].vertex_count); i += 32)
    {
        uint vi = meshlet_data[meshlets[mi].data_offset + i] + meshlets[mi].vertex_offset;

        vec3 position = vec3(vertices[vi].pos);
        vec3 normal = vec3(vertices[vi].normal);

        gl_MeshVerticesEXT[i].gl_Position = projection * view * vec4(position, 1.0);
#if DEBUG
        color[i] = vec4(meshlet_color, 1.0);
#else
        color[i] = vec4(1.0);
#endif
        material_index[i] = uint(meshlets[mi].material_index);
        texcoord[i] = vec2(vertices[vi].uv);
    }

    uint base = meshlets[mi].data_offset + vertex_count;

    for (uint tri = ti; tri < prim_count; tri += 32)
    {
        // calculate index byte by 4 bytes
        uint i0 = meshlet_data[base + (tri * 3 + 0) / 4];
        uint i1 = meshlet_data[base + (tri * 3 + 1) / 4];
        uint i2 = meshlet_data[base + (tri * 3 + 2) / 4];

        // calculate mask by 4 bytes (multiple with 8 to get the correct bit position)
        uint s0 = ((tri * 3 + 0) % 4) * 8;
        uint s1 = ((tri * 3 + 1) % 4) * 8;
        uint s2 = ((tri * 3 + 2) % 4) * 8;

        // calculate index byte by mask
        uint v0 = (i0 >> s0) & 0xFF;
        uint v1 = (i1 >> s1) & 0xFF;
        uint v2 = (i2 >> s2) & 0xFF;

        gl_PrimitiveTriangleIndicesEXT[tri] = uvec3(v0, v1, v2);
    }
}