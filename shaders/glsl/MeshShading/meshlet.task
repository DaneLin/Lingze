#version 450

#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_mesh_shader: require
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_GOOGLE_include_directive : require


#include "mesh.h"
#include "../common_math.h"

layout(local_size_x = TASK_WGSIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform UboData
{
	mat4 view;
	mat4 projection;
    float screen_width;
    float screen_height;
};


layout(set = 0, binding = 2) readonly buffer Meshlets
{
	Meshlet meshlets[];
};

// storage buffer for draw commands
layout(set = 0, binding = 5) readonly buffer VisibleMeshTaskDrawCommand
{
	MeshTaskDrawCommand draw_cmds[];
};

layout(set = 0, binding = 6, scalar) readonly buffer MeshDraws
{
	MeshDraw mesh_draws[];
};


taskPayloadSharedEXT TaskPayload payload;

shared int shared_count;

void main()
{
    uint mgi = gl_GlobalInvocationID.x;
    uint mi = mgi + draw_cmds[gl_DrawIDARB].meshlet_offset;

    mat4 model_matrix = mesh_draws[meshlets[mi].mesh_draw_index].model_matrix;

    vec4 view_center = (view * model_matrix * vec4(meshlets[mi].sphere_bound.xyz, 1.0));
    float radius = meshlets[mi].sphere_bound.w;
    vec3 cone_axis = vec3(int(meshlets[mi].cone_axis[0]) / 127.0, int(meshlets[mi].cone_axis[1]) / 127.0, int(meshlets[mi].cone_axis[2]) / 127.0);
    vec4 view_cone_axis = view * model_matrix* vec4(cone_axis, 0.0);
    float cone_cutoff = int(meshlets[mi].cone_cutoff) / 127.0;

    vec3 camera_position = vec3(0,0,0);

#if CULL
    bool accept = !cone_cull(view_center.xyz, radius, view_cone_axis.xyz, cone_cutoff, camera_position);
#else
    bool accept = true;
#endif

    uvec4 ballot = subgroupBallot(accept);

    uint index = subgroupBallotExclusiveBitCount(ballot);

    if(accept)
    {
        payload.meshlet_indices[index] = mi;
    }

    barrier();

    uint count = subgroupBallotBitCount(ballot);

    EmitMeshTasksEXT(count, 1,1); 
}